services:
  # Main development environment
  app:
    build:
      context: .
      dockerfile: Dockerfile
    hostname: ecomfastapireact
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GITHUB_PERSONAL_ACCESS_TOKEN=${GITHUB_PERSONAL_ACCESS_TOKEN}
      - USE_SQLITE_DB=False
      - POSTGRES_USER=ecommerce_user
      - POSTGRES_PASSWORD=ecommerce_password
      - POSTGRES_SERVER=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=ecommerce_db
      - SECRET_KEY=your-super-secret-key-change-this-in-production-please
    volumes:
      - ..:/workspaces/ecomfastapireact:cached
      - ${HOME}/.ssh:/home/dev/.ssh:ro
      - ${HOME}/.claude:/home/dev/.claude:rw
    networks:
      - ecommerce_network
    depends_on:
      postgres:
        condition: service_healthy
      neo4j:
        condition: service_started
      backend:
        condition: service_healthy
      frontend:
        condition: service_healthy
    # Keep container running
    command: sleep infinity

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ecommerce_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ecommerce_user
      POSTGRES_PASSWORD: ecommerce_password
      POSTGRES_DB: ecommerce_db
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - ecommerce_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ecommerce_user -d ecommerce_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend FastAPI
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: ecommerce_backend
    restart: unless-stopped
    environment:
      - USE_SQLITE_DB=False
      - POSTGRES_USER=ecommerce_user
      - POSTGRES_PASSWORD=ecommerce_password
      - POSTGRES_SERVER=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=ecommerce_db
      - SECRET_KEY=your-super-secret-key-change-this-in-production-please
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ecommerce_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React
  frontend:
    build:
      context: ../frontend-1
      dockerfile: Dockerfile
    container_name: ecommerce_frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - ecommerce_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PgAdmin for database administration
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: ecommerce_pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@ecommerce.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - ecommerce_network
    volumes:
      - pgadmin_data:/var/lib/pgadmin

  # Neo4j graph database - Required for Graphiti
  neo4j:
    image: neo4j:5.26
    ports:
      - "7687:7687"
      - "7474:7474"
    environment:
      NEO4J_AUTH: neo4j/neo4password
    volumes:
      - neo4j_data:/data
    restart: unless-stopped
    networks:
      - ecommerce_network

volumes:
  postgres_data:
    name: ecommerce_postgres_data
  pgadmin_data:
    name: ecommerce_pgadmin_data
  neo4j_data:

networks:
  ecommerce_network:
    driver: bridge
    name: ecommerce_network
